import type { ParamValue } from 'vue-router'
import type { Merge } from '../_types'
import { describe, expect, expectTypeOf, it, vi } from 'vitest'
import { computed, ref as deepRef, effectScope, nextTick, reactive, shallowRef, watch } from 'vue'
import { useRouteParams } from './index'

declare module 'vue-router' {

  export interface TypesConfig {
    /**
     * Route name map generated by unplugin-vue-router
     */
    RouteNamedMap: {
      '/': RouteRecordInfo<'/', '/', Record<never, never>, Record<never, never>>
      '/ueser/[id]/[name]': RouteRecordInfo<'/ueser/[id]/[name]', '/ueser/[id]/[name]', {
        id: ParamValue<true>
        name: ParamValue<true>
      }, {
        id: ParamValue<false>
        name: ParamValue<false>
      }>
      '/foo/[count]': RouteRecordInfo<'/foo/[count]', '/foo/[count]', {
        count: ParamValue<true>
      }, {
        count: ParamValue<false>
      }>
    }
  }
}
describe('useRouteParams', () => {
  const getRoute = (params: Record<string, any> = {}) => reactive({
    params,
    query: {},
    fullPath: '',
    hash: '',
    matched: [],
    meta: {},
    name: '',
    path: '',
    redirectedFrom: undefined,
  })
  it('should export', () => {
    expect(useRouteParams).toBeDefined()
  })

  it('should return current value', () => {
    const router = {} as any
    const route = getRoute({
      id: '1',
    })

    const id = useRouteParams('id', null, { route, router })
    const id2 = useRouteParams('id', '5', { route, router })
    const name = useRouteParams('name', 'defaultValue', { route, router })
    const name2 = useRouteParams('name', 100, { name: '/ueser/[id]/[name]', route, router })
    const foo = useRouteParams('foo', undefined, { route, router })

    expectTypeOf(id.value).toEqualTypeOf<string | null>()
    expectTypeOf(id2.value).toEqualTypeOf<string>()
    expectTypeOf(name.value).toEqualTypeOf<string>()
    expectTypeOf(name2.value).toEqualTypeOf<string | number>()
    expectTypeOf(foo.value).toEqualTypeOf<string | undefined>()

    expect(id.value).toBe('1')
    expect(id2.value).toBe('1')
    expect(name.value).toBe('defaultValue')
    expect(name2.value).toBe(100)
    expect(foo.value).toBe(undefined)
  })

  it('should return transformed value', () => {
    const route = getRoute()
    const router = {} as any

    const id = useRouteParams('id', '1', { transform: Number, route, router })

    expect(id.value).toBe(1)

    expectTypeOf(id.value).toEqualTypeOf<number>()
  })

  it('should handle transform get/set', async () => {
    let route = getRoute({
      serialized: '{"foo":"bar"}',
    })
    interface ObjectType { foo?: string }
    const router = { replace: (r: any) => route = r } as any

    const object = useRouteParams('serialized', '{}', {
      transform: {
        get: value => JSON.parse(value) as ObjectType,
        set: value => JSON.stringify(value),
      },
      router,
      route,
    })

    expectTypeOf(object.value).toEqualTypeOf<ObjectType>()

    expect(object.value).toEqual({ foo: 'bar' })

    object.value = { foo: 'baz' }

    await nextTick()

    expect(route.params.serialized).toBe('{"foo":"baz"}')
    expect(object.value).toEqual({ foo: 'baz' })
  })

  it('should handle transform with only get', async () => {
    let route = getRoute({
      search: 'VUE3',
    })
    const router = { replace: (r: any) => route = r } as any

    const search = useRouteParams('search', '', {
      transform: {
        get: value => value.toLowerCase(),
      },
      router,
      route,
    })
    expectTypeOf(search.value).toEqualTypeOf<string>()
    expect(search.value).toBe('vue3')
    expect(route.params.search).toBe('VUE3')
  })

  it('should handle transform with only set', async () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    const search = useRouteParams('search', '', {
      transform: {
        set: value => value.toLowerCase(),
      },
      router,
      route,
    })
    expectTypeOf(search.value).toEqualTypeOf<string>()
    search.value = 'VUE3'
    expect(search.value).toBe('vue3')

    await nextTick()

    expect(route.params.search).toBe('vue3')
  })

  it('should re-evaluate the value immediately', () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    const slug = useRouteParams('slug', 'foo', { route, router })
    const id = useRouteParams('id', '123', { route, router })
    const page = useRouteParams('page', null, { route, router })

    expectTypeOf(slug.value).toEqualTypeOf<string>()
    expectTypeOf(id.value).toEqualTypeOf<string>()
    expectTypeOf(page.value).toEqualTypeOf<string | null>()

    slug.value = 'bar'
    id.value = '456'
    page.value = '2'
    expect(slug.value).toBe('bar')
    expect(id.value).toBe('456')
    expect(page.value).toBe('2')
  })

  it('should update the route', async () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    const code = useRouteParams('code', null, { route, router })
    const page = useRouteParams('page', null, { route, router })
    const lang = useRouteParams('lang', null, { route, router })

    expectTypeOf(code.value).toEqualTypeOf<string | null>()
    expectTypeOf(page.value).toEqualTypeOf<string | null>()
    expectTypeOf(lang.value).toEqualTypeOf<string | null>()

    code.value = 'bar'
    page.value = '1'
    lang.value = 'en'

    await nextTick()

    expect(code.value).toBe('bar')
    expect(route.params.code).toBe('bar')
    expect(page.value).toBe('1')
    expect(route.params.page).toBe('1')
    expect(lang.value).toBe('en')
    expect(route.params.lang).toBe('en')
  })

  it('should return default value', () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    const page = useRouteParams('page', 10, { route, router })
    const lang = useRouteParams('lang', 'pt-BR', { route, router })

    expectTypeOf(page.value).toEqualTypeOf<string | number>()
    expectTypeOf(lang.value).toEqualTypeOf<string>()

    expect(page.value).toBe(10)
    expect(lang.value).toBe('pt-BR')
  })

  // docs @see https://router.vuejs.org/guide/essentials/route-matching-syntax.html#Optional-parameters
  it('should return default value when use vue-router optional parameters', () => {
    let route = getRoute({ page: '' })
    const router = { replace: (r: any) => route = r } as any

    const page = useRouteParams('page', 'default', { route, router })

    expectTypeOf(page.value).toEqualTypeOf<string>()

    expect(page.value).toBe('default')
  })

  it('should reset state on scope dispose', async () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any
    const scopeA = effectScope()
    const scopeB = effectScope()

    let page = deepRef<number | null>(null)
    let lang = deepRef<string | null>(null)
    let code = deepRef<string | null>(null)
    let slug = deepRef<string | null>(null)

    await scopeA.run(async () => {
      page = useRouteParams('page', null, { route, router })
      lang = useRouteParams('lang', null, { route, router })

      page.value = 2
      lang.value = 'pt-BR'

      await nextTick()
    })

    expect(page.value).toBe(2)
    expect(lang.value).toBe('pt-BR')
    expect(route.params.page).toBe(2)
    expect(route.params.lang).toBe('pt-BR')

    await scopeB.run(async () => {
      code = useRouteParams('code', null, { route, router })
      slug = useRouteParams('slug', null, { route, router })

      code.value = 'xyz'
      slug.value = 'vueuse'

      await nextTick()
    })

    expect(code.value).toBe('xyz')
    expect(slug.value).toBe('vueuse')
    expect(route.params.code).toBe('xyz')
    expect(route.params.slug).toBe('vueuse')

    scopeB.stop()

    expect(page.value).toBe(2)
    expect(lang.value).toBe('pt-BR')
    expect(code.value).toBeNull()
    expect(slug.value).toBeNull()

    scopeA.stop()

    expect(page.value).toBeNull()
    expect(lang.value).toBeNull()
  })

  it('should not reset params to default if is disposed from other scope', async () => {
    let route = getRoute()

    const router = { replace: (r: any) => route = r } as any

    const scopeA = effectScope()
    const scopeB = effectScope()

    route.params.page = 2

    const defaultPage = 'DEFAULT_PAGE'
    let page1 = deepRef<number | null>(null)
    await scopeA.run(async () => {
      page1 = useRouteParams('page', defaultPage, { route, router })
    })

    let page2 = deepRef<number | null>(null)
    await scopeB.run(async () => {
      page2 = useRouteParams('page', defaultPage, { route, router })
    })

    expect(page1.value).toBe(2)
    expect(page2.value).toBe(2)

    scopeA.stop()
    await nextTick()

    expect(page1.value).toBe(defaultPage)
    expect(page2.value).toBe(2)
  })

  it('should change the value when the route changes', () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    const lang = useRouteParams('lang', null, { route, router })

    expectTypeOf(lang.value).toEqualTypeOf<string | null>()

    expect(lang.value).toBeNull()

    route.params = { lang: 'en' }

    expect(lang.value).toBe('en')
  })

  it('should avoid trigger effects when the value doesn\'t change', async () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any
    const onUpdate = vi.fn()

    const page = useRouteParams('page', 1, { transform: Number, route, router })

    expectTypeOf(page.value).toEqualTypeOf<number>()

    watch(page, onUpdate)

    page.value = 1

    await nextTick()

    expect(page.value).toBe(1)
    expect(route.params.page).toBeUndefined()
    expect(onUpdate).not.toHaveBeenCalled()
  })

  it('should trigger effects only once', async () => {
    const route = getRoute()
    const router = { replace: (r: any) => Object.assign(route, r) } as any
    const onUpdate = vi.fn()

    const page = useRouteParams('page', 1, { transform: Number, route, router })

    expectTypeOf(page.value).toEqualTypeOf<number>()

    const pageObj = computed(() => ({
      page: page.value,
    }))

    watch(pageObj, onUpdate)

    page.value = 2

    await nextTick()
    await nextTick()

    expect(page.value).toBe(2)
    expect(route.params.page).toBe(2)
    expect(onUpdate).toHaveBeenCalledTimes(1)
  })

  it('should trigger effects only once with getter object as watch source', async () => {
    const route = getRoute({ page: '1' })
    const router = { replace: (r: any) => {
      Object.keys(r.params).forEach(paramsKey => r.params[paramsKey] = String(r.params[paramsKey]))
      return Object.assign(route, r)
    } } as any
    const onUpdate = vi.fn()

    const page = useRouteParams('page', 1, { transform: Number, route, router })

    expectTypeOf(page.value).toEqualTypeOf<number>()

    watch(() => ({ page: page.value }), onUpdate)

    page.value = 2
    await nextTick()
    await nextTick()

    expect(page.value).toBe(2)
    expect(route.params.page).toBe('2')
    expect(onUpdate).toHaveBeenCalledTimes(1)
  })

  it('should keep current query and hash', async () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    route.query = { foo: 'bar' }
    route.hash = '#hash'

    const id = useRouteParams('id', null, { route, router })

    expectTypeOf(id.value).toEqualTypeOf<string | null>()

    id.value = '2'

    await nextTick()

    expect(id.value).toBe('2')
    expect(route.hash).toBe('#hash')
    expect(route.query).toEqual({ foo: 'bar' })
  })

  it('should allow ref or getter as default value', () => {
    let route = getRoute()
    const router = { replace: (r: any) => route = r } as any

    const defaultPage = shallowRef(1)
    const defaultLang = () => 'pt-BR'

    const page = useRouteParams('page', defaultPage, { route, router })
    const lang = useRouteParams('lang', defaultLang, { route, router })

    expectTypeOf(page.value).toEqualTypeOf<string | number>()
    expectTypeOf(lang.value).toEqualTypeOf<string>()

    expect(page.value).toBe(1)
    expect(lang.value).toBe('pt-BR')

    page.value = 2
    lang.value = 'en-US'

    expect(page.value).toBe(2)
    expect(lang.value).toBe('en-US')
  })
  it('should handle entire params object', async () => {
    let route = getRoute({ id: '1', name: 'test' })
    const route2 = getRoute()
    const route3 = getRoute({ count: '5' })

    const router = { replace: (r: any) => route = r } as any

    const params = useRouteParams({ id: 'default', name: 'default' }, { route, router })
    const params2 = useRouteParams(null, { route: route2, router })
    const params3 = useRouteParams(undefined, { route: route2, router })
    const params4 = useRouteParams({ foo: 'test' }, { route: route2, router })
    const params5 = useRouteParams(null, { route: route3, router })
    const params6 = useRouteParams(undefined, { route: route3, router })
    const params7 = useRouteParams({ count: '10' }, { route: route3, router })
    const params8 = useRouteParams({ foo: 'test' }, { route: route3, router })
    const params9 = useRouteParams({ count: '10', foo: 'test' }, { route: route3, router })

    expectTypeOf(params.value).toEqualTypeOf<Merge<Record<string, string | undefined>, { id: string, name: string }>>()
    expectTypeOf(params2.value).toEqualTypeOf<Record<string, string | undefined>>()
    expectTypeOf(params3.value).toEqualTypeOf<Record<string, string | undefined>>()
    expectTypeOf(params4.value).toEqualTypeOf<Merge<Record<string, string | undefined>, { foo: string }>>()
    expectTypeOf(params5.value).toEqualTypeOf<Record<string, string | undefined>>()
    expectTypeOf(params6.value).toEqualTypeOf<Record<string, string | undefined>>()
    expectTypeOf(params7.value).toEqualTypeOf<Merge<Record<string, string | undefined>, { count: string }>>()
    expectTypeOf(params8.value).toEqualTypeOf<Merge<Record<string, string | undefined>, { foo: string }>>()
    expectTypeOf(params9.value).toEqualTypeOf<Merge<Record<string, string | undefined>, { count: string, foo: string }>>()

    expect(params.value).toEqual({ id: '1', name: 'test' })
    expect(params2.value).toEqual({})
    expect(params3.value).toEqual({})
    expect(params4.value).toEqual({ foo: 'test' })
    expect(params5.value).toEqual({ count: '5' })
    expect(params6.value).toEqual({ count: '5' })
    expect(params7.value).toEqual({ count: '5' })
    expect(params8.value).toEqual({ count: '5', foo: 'test' })
    expect(params9.value).toEqual({ count: '5', foo: 'test' })

    params.value = { id: '2', name: 'vue' }

    await nextTick()

    expect(route.params).toEqual({ id: '2', name: 'vue' })
  })

  it('should handle transform for entire params object', async () => {
    let route = getRoute({ count: '5' })
    const router = { replace: (r: any) => route = r } as any

    const params = useRouteParams(
      { count: '0' },
      {
        transform: {
          get: v => ({ count: Number(v.count) }),
          set: v => ({ count: String(v.count) }),
        },
        route,
        router,
      },
    )
    expectTypeOf(params.value).toEqualTypeOf<{ count: number }>()

    expect(params.value).toEqual({ count: 5 })

    params.value = { count: 10 }
    await nextTick()

    expect(route.params.count).toBe('10')
  })
  it('should handle entire params object with name', async () => {
    let route = getRoute({ id: '1', name: 'test' })
    const route2 = getRoute()
    const route3 = getRoute({ count: '5' })

    const router = { replace: (r: any) => route = r } as any

    const params = useRouteParams({ id: 'default', name: 'default' }, { name: '/ueser/[id]/[name]', route, router })
    const params2 = useRouteParams(null, { name: '/', route: route2, router })
    const params3 = useRouteParams(undefined, { name: '/', route: route2, router })
    const params4 = useRouteParams({ foo: 'test' }, { name: '/', route: route2, router })
    const params5 = useRouteParams(null, { name: '/foo/[count]', route: route3, router })
    const params6 = useRouteParams(undefined, { name: '/foo/[count]', route: route3, router })
    const params7 = useRouteParams({ count: '10' }, { name: '/foo/[count]', route: route3, router })
    const params8 = useRouteParams({ foo: 'test' }, { name: '/foo/[count]', route: route3, router })
    const params9 = useRouteParams({ count: '10', foo: 'test' }, { name: '/foo/[count]', route: route3, router })

    expectTypeOf(params.value).toEqualTypeOf<{ id: string, name: string }>()
    expectTypeOf(params2.value).toEqualTypeOf<Record<never, never>>()
    expectTypeOf(params3.value).toEqualTypeOf<Record<never, never>>()
    expectTypeOf(params4.value).toEqualTypeOf<{ foo: string }>()
    expectTypeOf(params5.value).toEqualTypeOf<{ count: string }>()
    expectTypeOf(params6.value).toEqualTypeOf<{ count: string }>()
    expectTypeOf(params7.value).toEqualTypeOf<{ count: string }>()
    expectTypeOf(params8.value).toEqualTypeOf<{ count: string, foo: string }>()
    expectTypeOf(params9.value).toEqualTypeOf<{ count: string, foo: string }>()

    expect(params.value).toEqual({ id: '1', name: 'test' })
    expect(params2.value).toEqual({})
    expect(params3.value).toEqual({})
    expect(params4.value).toEqual({ foo: 'test' })
    expect(params5.value).toEqual({ count: '5' })
    expect(params6.value).toEqual({ count: '5' })
    expect(params7.value).toEqual({ count: '5' })
    expect(params8.value).toEqual({ count: '5', foo: 'test' })
    expect(params9.value).toEqual({ count: '5', foo: 'test' })

    params.value = { id: '2', name: 'vue' }

    await nextTick()

    expect(route.params).toEqual({ id: '2', name: 'vue' })
  })

  it('should handle transform for entire params object with name', async () => {
    let route = getRoute({ count: '5' })
    const router = { replace: (r: any) => route = r } as any

    const params = useRouteParams(
      { count: '0' },
      {
        name: '/foo/[count]',
        transform: {
          get: v => ({ count: Number(v.count) }),
          set: v => ({ count: String(v.count) }),
        },
        route,
        router,
      },
    )
    expectTypeOf(params.value).toEqualTypeOf<{ count: number }>()

    expect(params.value).toEqual({ count: 5 })

    params.value = { count: 10 }
    await nextTick()

    expect(route.params.count).toBe('10')
  })

  it('should return current value with name', () => {
    const router = {} as any
    const route = getRoute({
      id: '1',
    })

    const id = useRouteParams('id', null, { name: '/ueser/[id]/[name]', route, router })
    const id2 = useRouteParams('id', '5', { name: '/ueser/[id]/[name]', route, router })
    const name = useRouteParams('name', 'defaultValue', { name: '/ueser/[id]/[name]', route, router })
    const name2 = useRouteParams('name', 100, { name: '/ueser/[id]/[name]', route, router })
    const foo = useRouteParams('foo', undefined, { name: '/ueser/[id]/[name]', route, router })

    expectTypeOf(id.value).toEqualTypeOf<string | null>()
    expectTypeOf(id2.value).toEqualTypeOf<string>()
    expectTypeOf(name.value).toEqualTypeOf<string>()
    expectTypeOf(name2.value).toEqualTypeOf<string | number>()
    expectTypeOf(foo.value).toEqualTypeOf<string | undefined>()

    expect(id.value).toBe('1')
    expect(id2.value).toBe('1')
    expect(name.value).toBe('defaultValue')
    expect(name2.value).toBe(100)
    expect(foo.value).toBe(undefined)
  })
})
